/*#include<stdio.h>
//用指针处理链表
//建立简单的静态链表
//所有链表都是在程序中定义的，其并不是临时开辟的，也不能用完后释放，这种链表称为"静态链表"
struct Student
{
	int num;
	float score;
	struct Student *next;//该结构体类型的指针变量
};
int main()
{
	struct Student a, b, c, *p, *head;//定义该结构体类型的变量以及指针变量
	a.num = 10101; a.score = 89.5;
	b.num = 10103; b.score = 90;
	c.num = 10107; c.score = 85;
	head = &a;//将头结点指向变量a的地址
	a.next = &b;//a结点的next成员为b的地址
	b.next = &c;
	c.next = NULL;
	p = head;//指针p指向a结点
	do
	{
		printf("%1d %5.1f\n", p->num, p->score);
		p = p->next;

	} while (p!= NULL);
	return 0;
}*/
/*#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct Student)
struct Student
{
	int num;
	float score;
	struct Student *next;
};
int n=0;
struct Student* creat()
{
	struct Student *p1, *p2, *head;
	p1 = p2 = (struct Student*)malloc(LEN);//为开辟空间需对malloc函数执行强制类型转换
	scanf("%d,%f", &p1->num, &p1->score);//输入第一个学生的学号和成绩
	head = NULL;
	while (p1->num != 0)
	{
		n = n + 1;
		if (n == 1)
			head = p1;//第一次将头指针赋值指向p1
		else
		{
			p2->next = p1;//依次连接
		}
		p2 = p1;
		p1= (struct Student*)malloc(LEN);//为p1开辟空间需对malloc函数执行强制类型转换
		scanf("%d,%f", &p1->num, &p1->score);//输入其他学生的学号和成绩
	}
	p2->next = NULL;
	return head;
}
int main()
{
	struct Student *p;
	p = creat();//调用结构体指针函数
	printf("\nnum:%d\nscore:%5.1f\n", p->num,p->score);
	return 0;
}*/
/*#include<stdio.h>
#include<stdlib.h>
#define LEN sizeof(struct Student)
//输出链表
struct Student
{
	long num;
	float score;
	struct Student *next;
};
int n;
struct Student *creat()
{
	struct Student *head=NULL, *p1, *p2;
	n = 0;
	p1 = p2 = (struct Student *)malloc(LEN);
	scanf("%ld,%f", &p1->num, &p1->score);
	
	head = NULL;
	while (p1->num != 0)
	{
		n = n+1;
		if (n == 1)
			head = p1;
		else
			p2->next = p1;
		p2 = p1;
		p1 = (struct Student *)malloc(LEN);
		scanf("%ld,%f", &p1->num, &p1->score);
	}
	p2->next = NULL;
	return head;
}
void print(struct Student *head)
{
	struct Student *p;
	p = head;
	if (p == NULL)
	{
		printf("Empty!");
		return ;
	}
	printf("Scores are:\n");
	if (head != NULL)
	{
		while(p != NULL)
		{
			printf("num:%ld,score:%5.2f\n", p->num, p->score);
			p = p->next;

		} 
	}
}
int main()
{
	struct Student *creat();
	struct Student *pt;
	pt = creat();
  
	print(pt);
	return 0;

}	*/
/*#include<stdio.h>
//共用体类型
//有若干个人员的数据，其中有学生和教师，学生的数据包括：姓名、学号、性别，职业、班级
//教师的数据包括：姓名、号码、性别、职业、职务
struct 
{
	int num;
	char name[10];
	char sex;//f代表女性，m代表男性
	char job;//s代表学生，t代表教师
	union
	{
		int clas;
		char position[10];//pro代表教授
	}category;

}person[2];
int main()
{
	for (int i = 0; i < 2; i++)
	{
		printf("Please enter the data of person:\n");
		scanf("%d %s %c %c", &person[i].num, person[i].name, &person[i].sex, &person[i].job);
		if (person[i].job == 's')
			scanf("%d", &person[i].category.clas);
		else if (person[i].job == 't')
			scanf("%s", person[i].category.position);
		else
			printf("Input error");
	}
	printf("\n");
	printf("No.   name       sex  job class/position\n");
	for (int i = 0; i < 2; i++)
	{
		if (person[i].job == 's')
		{
			printf("%-6d %-10s %-4c %-4c %-10d\n", person[i].num, person[i].name, person[i].sex, person[i].job,person[i].category.clas);
		}
		else
		{
			printf("%-6d %-10s %-4c %-4c %-10s\n", person[i].num, person[i].name, person[i].sex, person[i].job, person[i].category.position);
		}
	}
	return 0;
}*/
/*#include<stdio.h>
//使用枚举类型
//口袋中有红黄蓝白黑五种颜色的球若干个，若每次从口袋中先后取出3个球，问得到不同颜色的取法共有多少种，输出每种排列的情况
int main()
{
	enum Color { red, yellow, blue, white, black };//枚举类型
	
	enum Color i, j, k, pri;//定义枚举变量i,j,k,pri
	int n, loop;
	n = 0;
	for (i = red; i <= black; i=(enum Color)(i+1))
	{
		for (j = red; j <= black; j = (enum Color)(j + 1))
		{
			if (j != i)
			
				for (k = red; k <= black; k = (enum Color)(k + 1))
				{
					if ((k != i) && (k != j))
					{
						n = n + 1;
						printf("%-4d", n);
						for (loop = 1; loop <= 3; loop++)
						{
							switch (loop)
							{
							case 1:
								pri = i; break;
							case 2:
								pri = j; break;
							case 3:
								pri = k; break;
							default:break;
							}
							switch (pri)
							{
							case red:printf("%-10s", "red"); break;
							case yellow:printf("%-10s", "yellow"); break;
							case blue:printf("%-10s", "blue"); break;
							case white:printf("%-10s", "white"); break;
							case black:printf("%-10s", "black"); break;
							default:break;
							}
						}
						printf("\n");
					}

				}
			
		}
	}
	printf("\ntotal:%5d\n", n);
	return 0;
}*/
//用typedef声明新类型名来代替已有的类型名
// typedef int Integer
//typedef float Real
//int i,j; Integer i,j;其两者等价
//float c, d; Real c,d;其两者等价
